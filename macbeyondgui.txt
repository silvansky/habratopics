Консоль для маководов: Beyond the GUI



Доброго дня, уважаемые хабравчане-маководы!

Сегодня я расскажу как увеличить эффективность работы в Mac OS X за счёт использования консоли.<img src="http://habrastorage.org/storage2/e2a/e30/33b/e2ae3033b2be807588bcca7684065a53.png" align=right />

<h1>Лирическое отступление</h1>
Думаю, ни для кого не секрет, что Mac OS является Unix-based системой, но переработанной почти до неузнаваемости. Даже консоль засунули куда подальше - не сразу и найдёшь. И вся система нацелена на использование GUI, при дефолтных настройках даже переключение между кнопками по Tab не работает - без мыши никуда. И тем не менее, Мак - это не только окошки, не только док и лаунчер. Мак это ещё и вся мощь shell скриптов и консоли!

Если Вы пришли из мира M$, то для начала неплохо бы поучить общие команды shell'а, например, по вот этому <a href="http://khpi-iip.mipk.kharkiv.edu/library/extent/os/shell2/index.html">учебному пособию</a>. Как минимум, нужно усвоить команды перехода по каталогам и способы запуска программ и скриптов.

Если Вы пришли в мир Mac OS из мира Linux'а и FreeBSD, то, скорее всего, знаете как минимум основы shell-скриптинга. Но и для вас в статье может оказаться кое-что интересное, ведь в маке есть уникальные консольные команды, которые так же полезно знать.

Вот о некоторых особенностях маковской консоли далее и пойдёт речь.
<habracut text="Поехали!" />
<h1>Начнём работу</h1><img src="http://habrastorage.org/storage2/c20/593/9fb/c205939fbd1835bb7248d358eff0337e.png" align=right />
Для начала избавимся от стандартного терминала. Ну, точнее, поставим другой - получше. Я лично предпочитаю <a href='http://www.iterm2.com/'>iTerm2</a>, который подходит для работы куда лучше системного. Хотя, и у него бывают интересные моменты (см. картинку вверху).

Далее нам могут понадобиться дополнительные инструменты, поэтому устанавливаем <a href='http://www.macports.org/'>MacPorts</a> (хотя, конечно, можно и другой менеджер пакетов). Теперь мы можем ставить нужные консольные утилиты с помощью простых команд. Например, ставим Midnight Commander (он в любом случае может пригодиться), набираем в iTerm2:

<source lang="bash">
sudo port install mc
</source>

После ввода пароля и установки зависимостей и самого mc, можем его запустить, как вы уже догадались, командой <code>mc</code>.
<img src="http://habrastorage.org/storage2/895/007/2c8/8950072c8b742cabfd6f03574f4a6f62.png"/>
О ужас! Нам понадобятся функциональные клавиши, а они нажимаются только через <code>Fn+F15</code>, что же делать? Ну как что - лезть в системные настройки и выключать это. Иначе сложно будет с mc работать.

Ещё одно важное замечание: <font color=#acacac><s>кури мануалы</s></font>если что-то не понятно, набираем в консоли <code>man команда</code> - и получаем подробное описание команды. (Кстати, для выхода из просмотра мануала надо просто нажать Q).

<h1>Продолжаем знакомство с консолью. Команда <code>open</code></h1>
Легко можно заметить, что mc показывает куда больше файлов и папок, чем Finder. Конечно, можно поставить хак для него, чтобы он отображал такие файлы, но не все это любят. Так что остаётся лишь пользоваться <code>Cmd+Shift+G</code> и вводить вручную имя папки. Но данный способ не особо удобен: нет автокомплита, нет возможности видеть скрытые файлы. Теперь вернёмся к терминалу. В Mac OS X есть замечательнейшая команда <code>open</code>, которая действует так, как будто пользователь сделал даблклик на файле или папке в Finder - открывает файл, бандл или ссылку в связанной программе, открывает папку в Finder'е. Вот простой пример работы с этой командой: заходим с помощью mc в скрытую папку (например, /etc/) и набираем:

<source lang="bash">
open .
</source>

Wuala! Файндер отобразил нам нашу системную папку! Но это ещё не всё, ведь скрытые файлы всё ещё не видны. Для примера, откроем наш <code>.profile</code>:

<source lang="bash">
open .profile
</source>
И - опа! - скрытый файл открылся в TextEdit! Всё предельно просто.

<h3>Пара слов о бандлах</h3>
Это всем известно, но на всякий случай повторю: обычные программы в Mac OS X на самом деле являются папками с расширением .app и особым образом устроенным содержимым. Убедиться в этом легко: открываем в Finder папку /Applications/ и делаем <code>Ctrl+Click</code> (либо <code>Right-Click</code>, если хотите) на любой программе и выбираем "Показать содержимое пакета".
<img src="http://habrastorage.org/storage2/f94/3e1/2e2/f943e12e2f47648b61a030511f7ee636.png"/>
Из консоли это так же очень хорошо видно: mc отображает эти программы именно как папки. И как же запустить из консоли GUI-программу, спросите вы? Очень просто, есть даже два способа.

Способ первый, простейший:

<source lang="bash">
open /Applications/Safari.app
</source>
Программа будет запущена и консоль будет свободна для дальнейших действий.

Способ второй, интересный:

<source lang="bash">
/Applications/Safari.app/Contents/MacOS/Safari
</source>
Программа будет запущена, но консоль не освобидится - она будет ждать завершения программы и выводить всё, что программа захочет вывести в неё. То есть, таким образом можно посмотреть рабочий лог некоторых программ.

Ещё одно очень важное различие между этими двумя методами: второй позволяет запустить два экземпляра программы, в то время как первый активирует уже запущенную, буде такая имеется. Так что через консоль можно решить и эту проблему (хотя, скорее фичу) макоси: через Finder, док и лаунчер запустить два экземпляра программы нельзя, а вот из консоли - пожалуйста, хоть двадцать два.

<h1>Скрипт?</h1>
Расскажу вкратце что из себя представляет shell-скрипт. По сути - это обычный текстовый файл, содержащий серию команд для выполнения. Самый простой скрипт просто запускает последовательно все команды. Скрипты посложнее могут иметь условия, циклы и функции, то есть, скрипт может быть весьма большой и сложной программой. Основной плюс таких скриптов - на их службе вся мощь консольных утилит из мира unix, что с лихвой компенсирует бедность языковых конструкций. Приведу простой пример скрипта, который преобразует все файлы .png в текущей директории, уменьшив их размер до 200 пикселей в ширину или высоту.

<source lang="bash">
#!/bin/bash

for img in *.png; do
    fname=${img%.*}
    fext=${img##*.}
    sips -Z 200 ${img} --out ${fname}_200.${fext}
done
</source>
Пример простейший, но он демонстрирует главное: в скриптах сокрыта великая сила.

<h1>Скрипты AppleScript</h1>
В Mac OS X имеется несколько встроенных механизмов по автоматизации действий. Один из очень распространённых - AppleScript, для которого есть и графический редактор-запускатор. Но использовать такие скрипты можно и из консоли, для этого есть особая утилита - <code>osascript</code>. Использовать её можно так:

<source lang="bash">
osascript myscript
</source>
либо
<source lang="bash">
osascript -e "команда скрипта"
</source>
Не буду углубляться в AppleScript, он заслуживает отдельной статьи, и даже не одной. Так что рекомендую почитать <a href="http://www.apple.com/applescript">справку</a> или <a href="http://www.macinstruct.com/node/68">гугл по нему</a>.

Главное: Вы можете комбинировать shell-скрипты со скриптами AppleScript, чтобы добиться максимальной гибкости в работе! К примеру, я использую такие вот смешанные скрипты для автоматической стилизации образа диска: сам диск создаётся с помощью shell (см. ниже), а фон и расположение элементов в образе задаётся с помощью AppleScript.

Есть ещё <a href="http://habrahabr.ru/post/84695/">Automator</a>, но он совсем уж GUI-шный, так что в данной статье его рассматривать бессмысленно. Он, конечно, полезный, но до мощи консоли не дотягивает.

<h1>Кратко о других полезных командах Mac OS X</h1>
Полный (ну, почти) список уникальных для макоси команд можно найти в одной хорошей <a href="http://www.matisse.net/OSX/darwin_commands.html">статье</a> (хотя сведения там немного устарели), я же вкратце расскажу о наиболее интересных.

Для работы с образами дисков имеется консольная утилита <code>hdiutil</code>. Пара примеров работы с ней:

<source lang="bash">
# создание образа диска из содержимого папки mydata (для чтения и записи)
hdiutil create -ov -srcfolder mydata -format UDRW -volname "My Data Image" myimage.dmg

# конвертирование образа в сжатый ридонли
hdiutil convert myimage.dmg -format UDZO -imagekey zlib-level=9 -o myimage_ro.dmg
</source>
Более подробно про возможности можно узнать из <code>man hdiutil</code>.

Если Вы - разработчик программ для макоси, то наверняка знаете о такой замечательной вещи, как Info.plist, да и вообще о plist'ах. Так вот, есть очень удобная утилита, позволяющая конвертировать .plist в .bplist, то есть, в более быстрый и лёгкий бинарный формат плиста.

<source lang="bash">
# в бинарный
plutil -convert -format bin1 -o Info.bplist Info.plist

# в XML
plutil -convert -format xml1 -o Info.plist Info.bplist
</source>

Если хотите позаниматься ерундой, то можно из консоли проговорить любой текст. Для этого есть утилита <code>say</code>.

<source lang="bash">
# произнести фразу
say Hello Habr!

# прочитать вслух книгу на ночь
say -f coolstory.txt
</source>
Так же можно задавать голос, которым мак будет с нами говорить:
<source lang="bash">
say -v Bad habr habr habr habr habrahabr habr habrahabr
</source>

Одна беда - по-умолчанию говорит эта штука только по-английски.

Теперь снимем скриншот командой из консоли.

<source lang="bash">
# скриншот окна без тени, результат - в буфер обмена
screencapture -Wco

# автоматический скриншот всего экрана - в файл с текущим временем
screencapture shot_`date "+%Y-%m-%d_%H:%M:%S"`.png
</source>
Так же из консоли можно конвертировать текст между различными форматами. Например, можно переконвертировать .doc файл в HTML:

<source lang="bash">
# конвертировать в html и открыть результат в дефолтном браузере
textutil -convert html myfile.doc && open myfile.html
</source>
Так же textutil умеет преобразовывать кодировки.

Для изменения системных (и не только) настроек, можно использовать команду <code>defaults</code>. Используем её во благо! Включим наконец отображение скрытых файлов и папок в Finder!

<source lang="bash">
defaults write com.apple.Finder AppleShowAllFiles 1 && killall Finder
</source>
Файндер автоматически перезапустится и теперь будет отображать скрытые файлы и папки! Но опять таки, это не всем нравится, так давайте это выключим, пока <s>родители</s>кто-нибудь не испугался или не удалил нужных файликов. Для сокрытия в уже указанной команде поставьте 0 вместо 1. Ну и для примера, <a href="http://macdays.ru/mac-os/tweaks-mac-os-x/">ссылка на статью</a>, где описано много твиков с помощью этой команды.

<h1>Что-то типа заключения</h1>
Ну что ж, мы разобрали некоторые интересные возможности консоли в Mac OS X. Статья, разумеется, не претендует на полноту и является, скорее, "заманухой" для вовлечения маководов в shell-скриптинг да и вообще в консоль.

И да пребудет с Вами сила Unix!

метки: macosx, iterm2, console, shell script, shell, bash, 
